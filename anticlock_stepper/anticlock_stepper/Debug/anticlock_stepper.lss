
anticlock_stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000980  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000808  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000170  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004a0  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000112  00000000  00000000  0000183c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000025c  00000000  00000000  0000194e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00001baa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/delay.h>
#define delayv 10
int main(void)
{
	int i;
	DDRA=0b11111111;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
    while(1)
    {
        //TODO:: Please write your application code 
		
			for(int i=0;i<100;i++){            //clockwise
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	50 e0       	ldi	r21, 0x00	; 0
				PORTA=0b00000001;
  9a:	d1 e0       	ldi	r29, 0x01	; 1
				_delay_ms(delayv);
				PORTA=0b00001001;
  9c:	c9 e0       	ldi	r28, 0x09	; 9
				_delay_ms(delayv);
				PORTA=0b00001000;
  9e:	b8 e0       	ldi	r27, 0x08	; 8
				_delay_ms(delayv);
				PORTA=0b00001100;
  a0:	ac e0       	ldi	r26, 0x0C	; 12
				_delay_ms(delayv);
				PORTA=0b00000100;
  a2:	f4 e0       	ldi	r31, 0x04	; 4
				_delay_ms(delayv);
				PORTA=0b00000110;
  a4:	e6 e0       	ldi	r30, 0x06	; 6
				_delay_ms(delayv);
				PORTA=0b00000010;
  a6:	72 e0       	ldi	r23, 0x02	; 2
				_delay_ms(delayv);
				PORTA=0b00000011;
  a8:	63 e0       	ldi	r22, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	04 e6       	ldi	r16, 0x64	; 100
  ac:	10 e0       	ldi	r17, 0x00	; 0
	DDRA=0b11111111;
    while(1)
    {
        //TODO:: Please write your application code 
		
			for(int i=0;i<100;i++){            //clockwise
  ae:	ee 24       	eor	r14, r14
  b0:	ff 24       	eor	r15, r15
  b2:	3a c0       	rjmp	.+116    	; 0x128 <main+0x96>
				PORTA=0b00000001;
  b4:	db bb       	out	0x1b, r29	; 27
  b6:	83 ec       	ldi	r24, 0xC3	; 195
  b8:	99 e0       	ldi	r25, 0x09	; 9
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x28>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x2e>
  c0:	00 00       	nop
				_delay_ms(delayv);
				PORTA=0b00001001;
  c2:	cb bb       	out	0x1b, r28	; 27
  c4:	83 ec       	ldi	r24, 0xC3	; 195
  c6:	99 e0       	ldi	r25, 0x09	; 9
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x36>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x3c>
  ce:	00 00       	nop
				_delay_ms(delayv);
				PORTA=0b00001000;
  d0:	bb bb       	out	0x1b, r27	; 27
  d2:	83 ec       	ldi	r24, 0xC3	; 195
  d4:	99 e0       	ldi	r25, 0x09	; 9
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x44>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x4a>
  dc:	00 00       	nop
				_delay_ms(delayv);
				PORTA=0b00001100;
  de:	ab bb       	out	0x1b, r26	; 27
  e0:	83 ec       	ldi	r24, 0xC3	; 195
  e2:	99 e0       	ldi	r25, 0x09	; 9
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x52>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x58>
  ea:	00 00       	nop
				_delay_ms(delayv);
				PORTA=0b00000100;
  ec:	fb bb       	out	0x1b, r31	; 27
  ee:	83 ec       	ldi	r24, 0xC3	; 195
  f0:	99 e0       	ldi	r25, 0x09	; 9
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x60>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x66>
  f8:	00 00       	nop
				_delay_ms(delayv);
				PORTA=0b00000110;
  fa:	eb bb       	out	0x1b, r30	; 27
  fc:	83 ec       	ldi	r24, 0xC3	; 195
  fe:	99 e0       	ldi	r25, 0x09	; 9
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <main+0x6e>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x74>
 106:	00 00       	nop
				_delay_ms(delayv);
				PORTA=0b00000010;
 108:	7b bb       	out	0x1b, r23	; 27
 10a:	83 ec       	ldi	r24, 0xC3	; 195
 10c:	99 e0       	ldi	r25, 0x09	; 9
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x7c>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x82>
 114:	00 00       	nop
				_delay_ms(delayv);
				PORTA=0b00000011;
 116:	6b bb       	out	0x1b, r22	; 27
 118:	83 ec       	ldi	r24, 0xC3	; 195
 11a:	99 e0       	ldi	r25, 0x09	; 9
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <main+0x8a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x90>
 122:	00 00       	nop
	DDRA=0b11111111;
    while(1)
    {
        //TODO:: Please write your application code 
		
			for(int i=0;i<100;i++){            //clockwise
 124:	4f 5f       	subi	r20, 0xFF	; 255
 126:	5f 4f       	sbci	r21, 0xFF	; 255
 128:	44 36       	cpi	r20, 0x64	; 100
 12a:	51 05       	cpc	r21, r1
 12c:	1c f2       	brlt	.-122    	; 0xb4 <main+0x22>
 12e:	2f e7       	ldi	r18, 0x7F	; 127
 130:	3a e1       	ldi	r19, 0x1A	; 26
 132:	46 e0       	ldi	r20, 0x06	; 6
 134:	21 50       	subi	r18, 0x01	; 1
 136:	30 40       	sbci	r19, 0x00	; 0
 138:	40 40       	sbci	r20, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0xa2>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0xac>
 13e:	00 00       	nop
 140:	a8 01       	movw	r20, r16
				_delay_ms(delayv);
				
			 }
			 _delay_ms(2000);
			for(int i=0;i<100;i++){                 //anticlockwise
			PORTA=0b00000001;
 142:	db bb       	out	0x1b, r29	; 27
 144:	83 ec       	ldi	r24, 0xC3	; 195
 146:	99 e0       	ldi	r25, 0x09	; 9
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0xb6>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0xbc>
 14e:	00 00       	nop
			_delay_ms(delayv);
			PORTA=0b00000011;
 150:	6b bb       	out	0x1b, r22	; 27
 152:	83 ec       	ldi	r24, 0xC3	; 195
 154:	99 e0       	ldi	r25, 0x09	; 9
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0xc4>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0xca>
 15c:	00 00       	nop
			_delay_ms(delayv);
			PORTA=0b00000010;
 15e:	7b bb       	out	0x1b, r23	; 27
 160:	83 ec       	ldi	r24, 0xC3	; 195
 162:	99 e0       	ldi	r25, 0x09	; 9
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0xd2>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0xd8>
 16a:	00 00       	nop
			_delay_ms(delayv);
			PORTA=0b00000110;
 16c:	eb bb       	out	0x1b, r30	; 27
 16e:	83 ec       	ldi	r24, 0xC3	; 195
 170:	99 e0       	ldi	r25, 0x09	; 9
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <main+0xe0>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0xe6>
 178:	00 00       	nop
			_delay_ms(delayv);
			PORTA=0b00000100;
 17a:	fb bb       	out	0x1b, r31	; 27
 17c:	83 ec       	ldi	r24, 0xC3	; 195
 17e:	99 e0       	ldi	r25, 0x09	; 9
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0xee>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0xf4>
 186:	00 00       	nop
			_delay_ms(delayv);
			PORTA=0b00001100;
 188:	ab bb       	out	0x1b, r26	; 27
 18a:	83 ec       	ldi	r24, 0xC3	; 195
 18c:	99 e0       	ldi	r25, 0x09	; 9
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <main+0xfc>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0x102>
 194:	00 00       	nop
			_delay_ms(delayv);
			PORTA=0b00001000;
 196:	bb bb       	out	0x1b, r27	; 27
 198:	83 ec       	ldi	r24, 0xC3	; 195
 19a:	99 e0       	ldi	r25, 0x09	; 9
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <main+0x10a>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x110>
 1a2:	00 00       	nop
			_delay_ms(delayv);
			PORTA=0b00001001;
 1a4:	cb bb       	out	0x1b, r28	; 27
 1a6:	83 ec       	ldi	r24, 0xC3	; 195
 1a8:	99 e0       	ldi	r25, 0x09	; 9
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <main+0x118>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x11e>
 1b0:	00 00       	nop
 1b2:	41 50       	subi	r20, 0x01	; 1
 1b4:	50 40       	sbci	r21, 0x00	; 0
				PORTA=0b00000011;
				_delay_ms(delayv);
				
			 }
			 _delay_ms(2000);
			for(int i=0;i<100;i++){                 //anticlockwise
 1b6:	29 f6       	brne	.-118    	; 0x142 <main+0xb0>
 1b8:	2f e7       	ldi	r18, 0x7F	; 127
 1ba:	3a e1       	ldi	r19, 0x1A	; 26
 1bc:	46 e0       	ldi	r20, 0x06	; 6
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	30 40       	sbci	r19, 0x00	; 0
 1c2:	40 40       	sbci	r20, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0x12c>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x136>
 1c8:	00 00       	nop
	DDRA=0b11111111;
    while(1)
    {
        //TODO:: Please write your application code 
		
			for(int i=0;i<100;i++){            //clockwise
 1ca:	a7 01       	movw	r20, r14
 1cc:	ad cf       	rjmp	.-166    	; 0x128 <main+0x96>

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
