
clock2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000220  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 000000c0  00000000  00000000  000009c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000699  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000196  00000000  00000000  00001121  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004aa  00000000  00000000  000012b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  00001764  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000115  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000aa  00000000  00000000  000018cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001977  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6f 00 	call	0xde	; 0xde <main>
  8a:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <wrcommand>:
	     }		 	
    }
}
void wrcommand(unsigned char command)
{
	cbi(PORTB,PB0);
  92:	c0 98       	cbi	0x18, 0	; 24
	PORTD=command;
  94:	82 bb       	out	0x12, r24	; 18
	sbi(PORTB,PB1);
  96:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	83 ec       	ldi	r24, 0xC3	; 195
  9a:	99 e0       	ldi	r25, 0x09	; 9
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <wrcommand+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <wrcommand+0x10>
  a2:	00 00       	nop
	_delay_ms(10);
	cbi(PORTB,PB1);
  a4:	c1 98       	cbi	0x18, 1	; 24
}
  a6:	08 95       	ret

000000a8 <lcd_initialisation>:
	_delay_ms(10);
	cbi(PORTB,PB1);
}
void lcd_initialisation()
{
	wrcommand(0X38);
  a8:	88 e3       	ldi	r24, 0x38	; 56
  aa:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
	wrcommand(0X80);
  ae:	80 e8       	ldi	r24, 0x80	; 128
  b0:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
	wrcommand(0X06);
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
	wrcommand(0X01);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
	wrcommand(0X0C);    //curser off
  c0:	8c e0       	ldi	r24, 0x0C	; 12
  c2:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
	/*wrcommand(0X0E);    //curser is on
	wrcommand(0X0F);    //curser blink  */
  c6:	08 95       	ret

000000c8 <wrdata>:
	_delay_ms(10);
	cbi(PORTB,PB1);
}
void wrdata(unsigned char command)
{
	sbi(PORTB,PB0);
  c8:	c0 9a       	sbi	0x18, 0	; 24
	PORTD=command;
  ca:	82 bb       	out	0x12, r24	; 18
	sbi(PORTB,PB1);
  cc:	c1 9a       	sbi	0x18, 1	; 24
  ce:	83 ec       	ldi	r24, 0xC3	; 195
  d0:	99 e0       	ldi	r25, 0x09	; 9
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <wrdata+0xa>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <wrdata+0x10>
  d8:	00 00       	nop
	_delay_ms(10);
	cbi(PORTB,PB1);
  da:	c1 98       	cbi	0x18, 1	; 24
}
  dc:	08 95       	ret

000000de <main>:
#include <avr/delay.h>
#include <compat/deprecated.h>

int main(void)
{
	DDRD=255;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	81 bb       	out	0x11, r24	; 17
	DDRB=255;
  e2:	87 bb       	out	0x17, r24	; 23
	lcd_initialisation();
  e4:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_initialisation>
	
    while(1)
    {
        //TODO:: Please write your application code 
		for(int k=0;k<24;k++)
  e8:	44 24       	eor	r4, r4
  ea:	55 24       	eor	r5, r5
		{
			wrcommand(0X80+6);
  ec:	0f 2e       	mov	r0, r31
  ee:	f9 e4       	ldi	r31, 0x49	; 73
  f0:	af 2e       	mov	r10, r31
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	bf 2e       	mov	r11, r31
  f6:	f0 2d       	mov	r31, r0
			wrdata(':');
  f8:	0f 2e       	mov	r0, r31
  fa:	f4 e6       	ldi	r31, 0x64	; 100
  fc:	ef 2e       	mov	r14, r31
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	ff 2e       	mov	r15, r31
 102:	f0 2d       	mov	r31, r0
			wrcommand(0X80+4);
			wrdata(k/10 + 48);
 104:	0f 2e       	mov	r0, r31
 106:	fa e0       	ldi	r31, 0x0A	; 10
 108:	cf 2e       	mov	r12, r31
 10a:	dd 24       	eor	r13, r13
 10c:	f0 2d       	mov	r31, r0
			wrdata(k%10 + 48);
			
			for(int j=0;j<60;j++)
 10e:	22 24       	eor	r2, r2
 110:	33 24       	eor	r3, r3
				   wrdata(':');
			       wrcommand(0X80+7);
				   wrdata(j/10 + 48);
				   wrdata(j%10 + 48);
				   
		             for(int i=0;i<60;i++)
 112:	72 2c       	mov	r7, r2
 114:	63 2c       	mov	r6, r3
    while(1)
    {
        //TODO:: Please write your application code 
		for(int k=0;k<24;k++)
		{
			wrcommand(0X80+6);
 116:	86 e8       	ldi	r24, 0x86	; 134
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	f5 01       	movw	r30, r10
 11c:	09 95       	icall
			wrdata(':');
 11e:	8a e3       	ldi	r24, 0x3A	; 58
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	f7 01       	movw	r30, r14
 124:	09 95       	icall
			wrcommand(0X80+4);
 126:	84 e8       	ldi	r24, 0x84	; 132
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	f5 01       	movw	r30, r10
 12c:	09 95       	icall
			wrdata(k/10 + 48);
 12e:	c2 01       	movw	r24, r4
 130:	b6 01       	movw	r22, r12
 132:	0e 94 e7 00 	call	0x1ce	; 0x1ce <__divmodhi4>
 136:	ec 01       	movw	r28, r24
 138:	cb 01       	movw	r24, r22
 13a:	c0 96       	adiw	r24, 0x30	; 48
 13c:	f7 01       	movw	r30, r14
 13e:	09 95       	icall
			wrdata(k%10 + 48);
 140:	ce 01       	movw	r24, r28
 142:	c0 96       	adiw	r24, 0x30	; 48
 144:	f7 01       	movw	r30, r14
 146:	09 95       	icall
			
			for(int j=0;j<60;j++)
 148:	41 01       	movw	r8, r2
			   {
				   wrcommand(0X80+9);
 14a:	89 e8       	ldi	r24, 0x89	; 137
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	f5 01       	movw	r30, r10
 150:	09 95       	icall
				   wrdata(':');
 152:	8a e3       	ldi	r24, 0x3A	; 58
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	f7 01       	movw	r30, r14
 158:	09 95       	icall
			       wrcommand(0X80+7);
 15a:	87 e8       	ldi	r24, 0x87	; 135
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	f5 01       	movw	r30, r10
 160:	09 95       	icall
				   wrdata(j/10 + 48);
 162:	c4 01       	movw	r24, r8
 164:	b6 01       	movw	r22, r12
 166:	0e 94 e7 00 	call	0x1ce	; 0x1ce <__divmodhi4>
 16a:	ec 01       	movw	r28, r24
 16c:	cb 01       	movw	r24, r22
 16e:	c0 96       	adiw	r24, 0x30	; 48
 170:	f7 01       	movw	r30, r14
 172:	09 95       	icall
				   wrdata(j%10 + 48);
 174:	ce 01       	movw	r24, r28
 176:	c0 96       	adiw	r24, 0x30	; 48
 178:	f7 01       	movw	r30, r14
 17a:	09 95       	icall
				   
		             for(int i=0;i<60;i++)
 17c:	07 2d       	mov	r16, r7
 17e:	16 2d       	mov	r17, r6
		                  {
			                  wrcommand(0X80+10);
 180:	8a e8       	ldi	r24, 0x8A	; 138
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	f5 01       	movw	r30, r10
 186:	09 95       	icall
			                  wrdata(i/10 + 48);
 188:	c8 01       	movw	r24, r16
 18a:	b6 01       	movw	r22, r12
 18c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <__divmodhi4>
 190:	ec 01       	movw	r28, r24
 192:	cb 01       	movw	r24, r22
 194:	c0 96       	adiw	r24, 0x30	; 48
 196:	f7 01       	movw	r30, r14
 198:	09 95       	icall
			                  wrdata(i%10 + 48);
 19a:	ce 01       	movw	r24, r28
 19c:	c0 96       	adiw	r24, 0x30	; 48
 19e:	f7 01       	movw	r30, r14
 1a0:	09 95       	icall
				   wrdata(':');
			       wrcommand(0X80+7);
				   wrdata(j/10 + 48);
				   wrdata(j%10 + 48);
				   
		             for(int i=0;i<60;i++)
 1a2:	0f 5f       	subi	r16, 0xFF	; 255
 1a4:	1f 4f       	sbci	r17, 0xFF	; 255
 1a6:	0c 33       	cpi	r16, 0x3C	; 60
 1a8:	11 05       	cpc	r17, r1
 1aa:	51 f7       	brne	.-44     	; 0x180 <main+0xa2>
			wrdata(':');
			wrcommand(0X80+4);
			wrdata(k/10 + 48);
			wrdata(k%10 + 48);
			
			for(int j=0;j<60;j++)
 1ac:	08 94       	sec
 1ae:	81 1c       	adc	r8, r1
 1b0:	91 1c       	adc	r9, r1
 1b2:	8c e3       	ldi	r24, 0x3C	; 60
 1b4:	88 16       	cp	r8, r24
 1b6:	91 04       	cpc	r9, r1
 1b8:	41 f6       	brne	.-112    	; 0x14a <main+0x6c>
	lcd_initialisation();
	
    while(1)
    {
        //TODO:: Please write your application code 
		for(int k=0;k<24;k++)
 1ba:	08 94       	sec
 1bc:	41 1c       	adc	r4, r1
 1be:	51 1c       	adc	r5, r1
 1c0:	88 e1       	ldi	r24, 0x18	; 24
 1c2:	48 16       	cp	r4, r24
 1c4:	51 04       	cpc	r5, r1
 1c6:	0c f4       	brge	.+2      	; 0x1ca <main+0xec>
 1c8:	a6 cf       	rjmp	.-180    	; 0x116 <main+0x38>
 1ca:	21 01       	movw	r4, r2
 1cc:	a4 cf       	rjmp	.-184    	; 0x116 <main+0x38>

000001ce <__divmodhi4>:
 1ce:	97 fb       	bst	r25, 7
 1d0:	09 2e       	mov	r0, r25
 1d2:	07 26       	eor	r0, r23
 1d4:	0a d0       	rcall	.+20     	; 0x1ea <__divmodhi4_neg1>
 1d6:	77 fd       	sbrc	r23, 7
 1d8:	04 d0       	rcall	.+8      	; 0x1e2 <__divmodhi4_neg2>
 1da:	0c d0       	rcall	.+24     	; 0x1f4 <__udivmodhi4>
 1dc:	06 d0       	rcall	.+12     	; 0x1ea <__divmodhi4_neg1>
 1de:	00 20       	and	r0, r0
 1e0:	1a f4       	brpl	.+6      	; 0x1e8 <__divmodhi4_exit>

000001e2 <__divmodhi4_neg2>:
 1e2:	70 95       	com	r23
 1e4:	61 95       	neg	r22
 1e6:	7f 4f       	sbci	r23, 0xFF	; 255

000001e8 <__divmodhi4_exit>:
 1e8:	08 95       	ret

000001ea <__divmodhi4_neg1>:
 1ea:	f6 f7       	brtc	.-4      	; 0x1e8 <__divmodhi4_exit>
 1ec:	90 95       	com	r25
 1ee:	81 95       	neg	r24
 1f0:	9f 4f       	sbci	r25, 0xFF	; 255
 1f2:	08 95       	ret

000001f4 <__udivmodhi4>:
 1f4:	aa 1b       	sub	r26, r26
 1f6:	bb 1b       	sub	r27, r27
 1f8:	51 e1       	ldi	r21, 0x11	; 17
 1fa:	07 c0       	rjmp	.+14     	; 0x20a <__udivmodhi4_ep>

000001fc <__udivmodhi4_loop>:
 1fc:	aa 1f       	adc	r26, r26
 1fe:	bb 1f       	adc	r27, r27
 200:	a6 17       	cp	r26, r22
 202:	b7 07       	cpc	r27, r23
 204:	10 f0       	brcs	.+4      	; 0x20a <__udivmodhi4_ep>
 206:	a6 1b       	sub	r26, r22
 208:	b7 0b       	sbc	r27, r23

0000020a <__udivmodhi4_ep>:
 20a:	88 1f       	adc	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	5a 95       	dec	r21
 210:	a9 f7       	brne	.-22     	; 0x1fc <__udivmodhi4_loop>
 212:	80 95       	com	r24
 214:	90 95       	com	r25
 216:	bc 01       	movw	r22, r24
 218:	cd 01       	movw	r24, r26
 21a:	08 95       	ret

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
