
line_tracer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  000008c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000344  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000a8  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002a6  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000a4  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000042  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/io.h>
//#include <avr/delay.h>

int main(void)
{
	DDRA=0b11111111;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	DDRC=0b00000000;
  96:	14 ba       	out	0x14, r1	; 20
			PORTA=0b00000000;
		}
		else if(y==1)
		{
			{
				PORTA=0b00001010;
  98:	4a e0       	ldi	r20, 0x0A	; 10
					case 0:
					PORTA=0b00001010;   //forward
					break;
					
					case 1:
					PORTA=0b00001011;   //right  turn
  9a:	5b e0       	ldi	r21, 0x0B	; 11
					PORTA=0b00001111;   //stop
					break;
					
					default:
					PORTA=0b00000000;
					PORTA=0b00000101;
  9c:	e5 e0       	ldi	r30, 0x05	; 5
					{
						PORTA=0b00001011;     //right  turn
					}
					else if(z==0b00000010)
					{
						PORTA=0b00001110;      //left  turn
  9e:	6e e0       	ldi	r22, 0x0E	; 14
					case 2:
					PORTA=0b00001110;   //left   turn
					break;
					
					case 3:
					PORTA=0b00001111;   //stop
  a0:	7f e0       	ldi	r23, 0x0F	; 15
	int x,y,z;
    while(1)
    {
        //TODO:: Please write your application code 
		
		y = PIND & 0b00000001;
  a2:	80 b3       	in	r24, 0x10	; 16
  a4:	90 e0       	ldi	r25, 0x00	; 0
		if(y==0)
  a6:	9c 01       	movw	r18, r24
  a8:	21 70       	andi	r18, 0x01	; 1
  aa:	30 70       	andi	r19, 0x00	; 0
  ac:	80 fd       	sbrc	r24, 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <main+0x22>
		{
			PORTA=0b00000000;
  b0:	1b ba       	out	0x1b, r1	; 27
  b2:	f7 cf       	rjmp	.-18     	; 0xa2 <main+0x10>
		}
		else if(y==1)
  b4:	21 30       	cpi	r18, 0x01	; 1
  b6:	31 05       	cpc	r19, r1
  b8:	a1 f7       	brne	.-24     	; 0xa2 <main+0x10>
		{
			{
				PORTA=0b00001010;
  ba:	4b bb       	out	0x1b, r20	; 27
				x = PINC & 0b00000011;
  bc:	83 b3       	in	r24, 0x13	; 19
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	83 70       	andi	r24, 0x03	; 3
  c2:	90 70       	andi	r25, 0x00	; 0
				switch(x)
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	91 05       	cpc	r25, r1
  c8:	79 f0       	breq	.+30     	; 0xe8 <main+0x56>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	91 05       	cpc	r25, r1
  ce:	1c f4       	brge	.+6      	; 0xd6 <main+0x44>
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	41 f0       	breq	.+16     	; 0xe4 <main+0x52>
  d4:	0f c0       	rjmp	.+30     	; 0xf4 <main+0x62>
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	91 05       	cpc	r25, r1
  da:	41 f0       	breq	.+16     	; 0xec <main+0x5a>
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	91 05       	cpc	r25, r1
  e0:	49 f4       	brne	.+18     	; 0xf4 <main+0x62>
  e2:	06 c0       	rjmp	.+12     	; 0xf0 <main+0x5e>
				{
					case 0:
					PORTA=0b00001010;   //forward
  e4:	4b bb       	out	0x1b, r20	; 27
					break;
  e6:	dd cf       	rjmp	.-70     	; 0xa2 <main+0x10>
					
					case 1:
					PORTA=0b00001011;   //right  turn
  e8:	5b bb       	out	0x1b, r21	; 27
					break;
  ea:	db cf       	rjmp	.-74     	; 0xa2 <main+0x10>
					
					case 2:
					PORTA=0b00001110;   //left   turn
  ec:	6b bb       	out	0x1b, r22	; 27
					break;
  ee:	d9 cf       	rjmp	.-78     	; 0xa2 <main+0x10>
					
					case 3:
					PORTA=0b00001111;   //stop
  f0:	7b bb       	out	0x1b, r23	; 27
					break;
  f2:	d7 cf       	rjmp	.-82     	; 0xa2 <main+0x10>
					
					default:
					PORTA=0b00000000;
  f4:	1b ba       	out	0x1b, r1	; 27
					PORTA=0b00000101;
  f6:	eb bb       	out	0x1b, r30	; 27
					z = PINC & 0b00000011;
  f8:	83 b3       	in	r24, 0x13	; 19
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	83 70       	andi	r24, 0x03	; 3
  fe:	90 70       	andi	r25, 0x00	; 0
					if(z==0b00000001)
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	91 05       	cpc	r25, r1
 104:	11 f4       	brne	.+4      	; 0x10a <main+0x78>
					{
						PORTA=0b00001011;     //right  turn
 106:	5b bb       	out	0x1b, r21	; 27
 108:	cc cf       	rjmp	.-104    	; 0xa2 <main+0x10>
					}
					else if(z==0b00000010)
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	91 05       	cpc	r25, r1
 10e:	49 f6       	brne	.-110    	; 0xa2 <main+0x10>
					{
						PORTA=0b00001110;      //left  turn
 110:	6b bb       	out	0x1b, r22	; 27
 112:	c7 cf       	rjmp	.-114    	; 0xa2 <main+0x10>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
