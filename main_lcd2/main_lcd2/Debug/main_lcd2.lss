
main_lcd2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 000000c0  00000000  00000000  00000950  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000066b  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a7  00000000  00000000  0000107b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000049e  00000000  00000000  00001222  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  000016c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011e  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000062  00000000  00000000  00001832  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6f 00 	call	0xde	; 0xde <main>
  8a:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <wrcommand>:
		}
    }
}
void wrcommand(unsigned char command)
{
	cbi(PORTB,PB0);
  92:	c0 98       	cbi	0x18, 0	; 24
	PORTD=command;
  94:	82 bb       	out	0x12, r24	; 18
	sbi(PORTB,PB1);
  96:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	87 ea       	ldi	r24, 0xA7	; 167
  9a:	91 e6       	ldi	r25, 0x61	; 97
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <wrcommand+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <wrcommand+0x10>
  a2:	00 00       	nop
	_delay_ms(100);
	cbi(PORTB,PB1);
  a4:	c1 98       	cbi	0x18, 1	; 24
}
  a6:	08 95       	ret

000000a8 <lcd_initialisation>:
	_delay_ms(100);
	cbi(PORTB,PB1);
}
void lcd_initialisation()
{
	wrcommand(0X38);
  a8:	88 e3       	ldi	r24, 0x38	; 56
  aa:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
	wrcommand(0X80);
  ae:	80 e8       	ldi	r24, 0x80	; 128
  b0:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
	wrcommand(0X06);
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
	wrcommand(0X01);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
	wrcommand(0X0C);    //curser off
  c0:	8c e0       	ldi	r24, 0x0C	; 12
  c2:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
	/*wrcommand(0X0E);    //curser is on
	wrcommand(0X0F);    //curser blink  */
}
  c6:	08 95       	ret

000000c8 <wrdata>:
	_delay_ms(100);
	cbi(PORTB,PB1);
}
void wrdata(unsigned char command)
{
	sbi(PORTB,PB0);
  c8:	c0 9a       	sbi	0x18, 0	; 24
	PORTD=command;
  ca:	82 bb       	out	0x12, r24	; 18
	sbi(PORTB,PB1);
  cc:	c1 9a       	sbi	0x18, 1	; 24
  ce:	87 ea       	ldi	r24, 0xA7	; 167
  d0:	91 e6       	ldi	r25, 0x61	; 97
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <wrdata+0xa>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <wrdata+0x10>
  d8:	00 00       	nop
	_delay_ms(100);
	cbi(PORTB,PB1);
  da:	c1 98       	cbi	0x18, 1	; 24
}
  dc:	08 95       	ret

000000de <main>:
#include <avr/io.h>
#include <avr/delay.h>
#include <compat/deprecated.h>
int main(void)
{
	DDRD=255;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	81 bb       	out	0x11, r24	; 17
	DDRB=255;
  e2:	87 bb       	out	0x17, r24	; 23
	lcd_initialisation();
  e4:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_initialisation>
    while(1)
    {
        //TODO:: Please write your application code 
		for(int i=0;i<1000;i++)
  e8:	c0 e0       	ldi	r28, 0x00	; 0
  ea:	d0 e0       	ldi	r29, 0x00	; 0
		{
			wrcommand(0X80);
			wrdata(i/100 + 48);
  ec:	0f 2e       	mov	r0, r31
  ee:	f4 e6       	ldi	r31, 0x64	; 100
  f0:	cf 2e       	mov	r12, r31
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	df 2e       	mov	r13, r31
  f6:	f0 2d       	mov	r31, r0
  f8:	0f 2e       	mov	r0, r31
  fa:	f4 e6       	ldi	r31, 0x64	; 100
  fc:	af 2e       	mov	r10, r31
  fe:	bb 24       	eor	r11, r11
 100:	f0 2d       	mov	r31, r0
			wrdata((i/10)%10+48);
 102:	0f 2e       	mov	r0, r31
 104:	fa e0       	ldi	r31, 0x0A	; 10
 106:	ef 2e       	mov	r14, r31
 108:	ff 24       	eor	r15, r15
 10a:	f0 2d       	mov	r31, r0
	DDRB=255;
	lcd_initialisation();
    while(1)
    {
        //TODO:: Please write your application code 
		for(int i=0;i<1000;i++)
 10c:	88 24       	eor	r8, r8
 10e:	99 24       	eor	r9, r9
		{
			wrcommand(0X80);
 110:	80 e8       	ldi	r24, 0x80	; 128
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
			wrdata(i/100 + 48);
 118:	ce 01       	movw	r24, r28
 11a:	b5 01       	movw	r22, r10
 11c:	0e 94 ab 00 	call	0x156	; 0x156 <__divmodhi4>
 120:	cb 01       	movw	r24, r22
 122:	c0 96       	adiw	r24, 0x30	; 48
 124:	f6 01       	movw	r30, r12
 126:	09 95       	icall
			wrdata((i/10)%10+48);
 128:	ce 01       	movw	r24, r28
 12a:	b7 01       	movw	r22, r14
 12c:	0e 94 ab 00 	call	0x156	; 0x156 <__divmodhi4>
 130:	8c 01       	movw	r16, r24
 132:	cb 01       	movw	r24, r22
 134:	b7 01       	movw	r22, r14
 136:	0e 94 ab 00 	call	0x156	; 0x156 <__divmodhi4>
 13a:	c0 96       	adiw	r24, 0x30	; 48
 13c:	f6 01       	movw	r30, r12
 13e:	09 95       	icall
			wrdata(i%10+48);
 140:	c8 01       	movw	r24, r16
 142:	c0 96       	adiw	r24, 0x30	; 48
 144:	f6 01       	movw	r30, r12
 146:	09 95       	icall
	DDRB=255;
	lcd_initialisation();
    while(1)
    {
        //TODO:: Please write your application code 
		for(int i=0;i<1000;i++)
 148:	21 96       	adiw	r28, 0x01	; 1
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	c8 3e       	cpi	r28, 0xE8	; 232
 14e:	d8 07       	cpc	r29, r24
 150:	fc f2       	brlt	.-66     	; 0x110 <main+0x32>
 152:	e4 01       	movw	r28, r8
 154:	dd cf       	rjmp	.-70     	; 0x110 <main+0x32>

00000156 <__divmodhi4>:
 156:	97 fb       	bst	r25, 7
 158:	09 2e       	mov	r0, r25
 15a:	07 26       	eor	r0, r23
 15c:	0a d0       	rcall	.+20     	; 0x172 <__divmodhi4_neg1>
 15e:	77 fd       	sbrc	r23, 7
 160:	04 d0       	rcall	.+8      	; 0x16a <__divmodhi4_neg2>
 162:	0c d0       	rcall	.+24     	; 0x17c <__udivmodhi4>
 164:	06 d0       	rcall	.+12     	; 0x172 <__divmodhi4_neg1>
 166:	00 20       	and	r0, r0
 168:	1a f4       	brpl	.+6      	; 0x170 <__divmodhi4_exit>

0000016a <__divmodhi4_neg2>:
 16a:	70 95       	com	r23
 16c:	61 95       	neg	r22
 16e:	7f 4f       	sbci	r23, 0xFF	; 255

00000170 <__divmodhi4_exit>:
 170:	08 95       	ret

00000172 <__divmodhi4_neg1>:
 172:	f6 f7       	brtc	.-4      	; 0x170 <__divmodhi4_exit>
 174:	90 95       	com	r25
 176:	81 95       	neg	r24
 178:	9f 4f       	sbci	r25, 0xFF	; 255
 17a:	08 95       	ret

0000017c <__udivmodhi4>:
 17c:	aa 1b       	sub	r26, r26
 17e:	bb 1b       	sub	r27, r27
 180:	51 e1       	ldi	r21, 0x11	; 17
 182:	07 c0       	rjmp	.+14     	; 0x192 <__udivmodhi4_ep>

00000184 <__udivmodhi4_loop>:
 184:	aa 1f       	adc	r26, r26
 186:	bb 1f       	adc	r27, r27
 188:	a6 17       	cp	r26, r22
 18a:	b7 07       	cpc	r27, r23
 18c:	10 f0       	brcs	.+4      	; 0x192 <__udivmodhi4_ep>
 18e:	a6 1b       	sub	r26, r22
 190:	b7 0b       	sbc	r27, r23

00000192 <__udivmodhi4_ep>:
 192:	88 1f       	adc	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	5a 95       	dec	r21
 198:	a9 f7       	brne	.-22     	; 0x184 <__udivmodhi4_loop>
 19a:	80 95       	com	r24
 19c:	90 95       	com	r25
 19e:	bc 01       	movw	r22, r24
 1a0:	cd 01       	movw	r24, r26
 1a2:	08 95       	ret

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
