
lcd_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000014e  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000940  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000039f  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e8  00000000  00000000  00000d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a8  00000000  00000000  00000e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ac  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c3  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001293  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 38       	cpi	r26, 0x88	; 136
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


#include <avr/io.h>
#include <avr/delay.h>
int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	a8 97       	sbiw	r28, 0x28	; 40
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	DDRC=0b00000000;  //to detect input from pin
  a6:	14 ba       	out	0x14, r1	; 20
	DDRA=0b11111111;  // lcd 1 common anode
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a bb       	out	0x1a, r24	; 26
	DDRD=0b11111111;  // lcd 2 common cathode
  ac:	81 bb       	out	0x11, r24	; 17
	int count = 0, temp = 0;
    int a[10]={0b1000000, 0b1111001, 0b0100100, 0b0110000, 0b0011001, 0b0010010, 0b0000010, 0b1111000, 0b0000000, 0b0010000};    //common anode connected to porta
  ae:	de 01       	movw	r26, r28
  b0:	11 96       	adiw	r26, 0x01	; 1
  b2:	e0 e6       	ldi	r30, 0x60	; 96
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	84 e1       	ldi	r24, 0x14	; 20
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	81 50       	subi	r24, 0x01	; 1
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x26>
	int b[10]={0b0111111, 0b0000110, 0b1011011, 0b1001111, 0b1100110, 0b1101101, 0b1111101, 0b0000111, 0b1111111, 0b1101111};    //common cathod connected to portd
  c0:	de 01       	movw	r26, r28
  c2:	55 96       	adiw	r26, 0x15	; 21
  c4:	e4 e7       	ldi	r30, 0x74	; 116
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	84 e1       	ldi	r24, 0x14	; 20
  ca:	01 90       	ld	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	81 50       	subi	r24, 0x01	; 1
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x38>
int main(void)
{
	DDRC=0b00000000;  //to detect input from pin
	DDRA=0b11111111;  // lcd 1 common anode
	DDRD=0b11111111;  // lcd 2 common cathode
	int count = 0, temp = 0;
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
 */ 


#include <avr/io.h>
#include <avr/delay.h>
int main(void)
  d6:	8e 01       	movw	r16, r28
  d8:	07 5d       	subi	r16, 0xD7	; 215
  da:	1f 4f       	sbci	r17, 0xFF	; 255
					  }
					else if(x==1 && temp==1)
					  {
						  count++;
						  PORTA=a[count];
						 temp=0;
  dc:	aa 24       	eor	r10, r10
  de:	bb 24       	eor	r11, r11
  e0:	fa 2c       	mov	r15, r10
  e2:	eb 2c       	mov	r14, r11
				for(int count=0;count<10;count++)
				{   
			
					if(x==0 && temp==0)
					  {
						  temp=1;
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	70 e0       	ldi	r23, 0x00	; 0
    int a[10]={0b1000000, 0b1111001, 0b0100100, 0b0110000, 0b0011001, 0b0010010, 0b0000010, 0b1111000, 0b0000000, 0b0010000};    //common anode connected to porta
	int b[10]={0b0111111, 0b0000110, 0b1011011, 0b1001111, 0b1100110, 0b1101101, 0b1111101, 0b0000111, 0b1111111, 0b1101111};    //common cathod connected to portd
    while(1)
    {
        //TODO:: Please write your application code
		int x = PINC & 0b00000001;
  e8:	43 b3       	in	r20, 0x13	; 19
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	41 70       	andi	r20, 0x01	; 1
  ee:	50 70       	andi	r21, 0x00	; 0
  f0:	fe 01       	movw	r30, r28
  f2:	75 96       	adiw	r30, 0x15	; 21
		// int z=0;
		for(int i=0;i<10;i++)
			{
				
				PORTD=b[i];
  f4:	20 81       	ld	r18, Z
  f6:	32 96       	adiw	r30, 0x02	; 2
  f8:	22 bb       	out	0x12, r18	; 18
	
				for(int count=0;count<10;count++)
  fa:	95 01       	movw	r18, r10
				{   
			
					if(x==0 && temp==0)
  fc:	41 15       	cp	r20, r1
  fe:	51 05       	cpc	r21, r1
 100:	21 f4       	brne	.+8      	; 0x10a <main+0x78>
 102:	00 97       	sbiw	r24, 0x00	; 0
 104:	c9 f4       	brne	.+50     	; 0x138 <main+0xa6>
					  {
						  temp=1;
 106:	cb 01       	movw	r24, r22
 108:	17 c0       	rjmp	.+46     	; 0x138 <main+0xa6>
					  }
					else if(x==1 && temp==1)
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	51 05       	cpc	r21, r1
 10e:	a1 f4       	brne	.+40     	; 0x138 <main+0xa6>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	91 05       	cpc	r25, r1
 114:	89 f4       	brne	.+34     	; 0x138 <main+0xa6>
					  {
						  count++;
 116:	2f 5f       	subi	r18, 0xFF	; 255
 118:	3f 4f       	sbci	r19, 0xFF	; 255
						  PORTA=a[count];
 11a:	c9 01       	movw	r24, r18
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	cc 24       	eor	r12, r12
 122:	dd 24       	eor	r13, r13
 124:	c3 94       	inc	r12
 126:	cc 0e       	add	r12, r28
 128:	dd 1e       	adc	r13, r29
 12a:	8c 0d       	add	r24, r12
 12c:	9d 1d       	adc	r25, r13
 12e:	dc 01       	movw	r26, r24
 130:	8c 91       	ld	r24, X
 132:	8b bb       	out	0x1b, r24	; 27
						 temp=0;
 134:	8f 2d       	mov	r24, r15
 136:	9e 2d       	mov	r25, r14
		for(int i=0;i<10;i++)
			{
				
				PORTD=b[i];
	
				for(int count=0;count<10;count++)
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	2a 30       	cpi	r18, 0x0A	; 10
 13e:	31 05       	cpc	r19, r1
 140:	ec f2       	brlt	.-70     	; 0xfc <main+0x6a>
    while(1)
    {
        //TODO:: Please write your application code
		int x = PINC & 0b00000001;
		// int z=0;
		for(int i=0;i<10;i++)
 142:	e0 17       	cp	r30, r16
 144:	f1 07       	cpc	r31, r17
 146:	b1 f6       	brne	.-84     	; 0xf4 <main+0x62>
 148:	cf cf       	rjmp	.-98     	; 0xe8 <main+0x56>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
