
interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000202  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000068  00800060  00800060  00000276  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000009d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005a9  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001fc  00000000  00000000  00000ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039b  00000000  00000000  000011f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001590  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015c  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012d  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3c       	cpi	r26, 0xC8	; 200
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  8a:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_Init>:
	gsm_data_count++;
}
void USART_Init()
{
	/* Set baud rate */
	UBRRH = 0;
  92:	10 bc       	out	0x20, r1	; 32
	UBRRL =51;
  94:	83 e3       	ldi	r24, 0x33	; 51
  96:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB|= (1<<RXEN)|(1<<TXEN);
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	88 61       	ori	r24, 0x18	; 24
  9c:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data---ucsz0=1,ucsz1=1, 1stop bit ---usbs=0*/
	UCSRC |= (1 << URSEL)|(3<<UCSZ0);
  9e:	80 b5       	in	r24, 0x20	; 32
  a0:	86 68       	ori	r24, 0x86	; 134
  a2:	80 bd       	out	0x20, r24	; 32
	UCSRA |= (1<<RXCIE);
  a4:	5f 9a       	sbi	0x0b, 7	; 11
}
  a6:	08 95       	ret

000000a8 <wrdata>:
	_delay_ms(100);
	cbi(PORTB,PB1);
}
void wrdata(unsigned char command)
{
	sbi(PORTB,PB0);
  a8:	c0 9a       	sbi	0x18, 0	; 24
	PORTD=command;
  aa:	82 bb       	out	0x12, r24	; 18
	sbi(PORTB,PB1);
  ac:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	87 ea       	ldi	r24, 0xA7	; 167
  b0:	91 e6       	ldi	r25, 0x61	; 97
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <wrdata+0xa>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <wrdata+0x10>
  b8:	00 00       	nop
	_delay_ms(100);
	cbi(PORTB,PB1);
  ba:	c1 98       	cbi	0x18, 1	; 24
}
  bc:	08 95       	ret

000000be <main>:

int gsm_data_count=0,i;
char gsm_data[100];
int main(void)
{
	DDRD=255;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	81 bb       	out	0x11, r24	; 17
	DDRB=255;
  c2:	87 bb       	out	0x17, r24	; 23
	DDRA=255;
  c4:	8a bb       	out	0x1a, r24	; 26
	lcd_initialisation();
  c6:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_initialisation>
	USART_Init();
  ca:	0e 94 49 00 	call	0x92	; 0x92 <USART_Init>
	sei();                //it calls interrupts
  ce:	78 94       	sei
    while(1)
    {
        //TODO:: Please write your application code 
		for(i=0;i<100;i++)
		{
			if(gsm_data[i]=='C'&& gsm_data[i+1]=='M'&& gsm_data[i+2]=='T'&& gsm_data[i+3]=='I')
  d0:	02 e6       	ldi	r16, 0x62	; 98
  d2:	10 e0       	ldi	r17, 0x00	; 0
  d4:	0f 2e       	mov	r0, r31
  d6:	f3 e6       	ldi	r31, 0x63	; 99
  d8:	ef 2e       	mov	r14, r31
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	ff 2e       	mov	r15, r31
  de:	f0 2d       	mov	r31, r0
  e0:	0f 2e       	mov	r0, r31
  e2:	f4 e6       	ldi	r31, 0x64	; 100
  e4:	cf 2e       	mov	r12, r31
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	df 2e       	mov	r13, r31
  ea:	f0 2d       	mov	r31, r0
#include <avr/delay.h>
#include <compat/deprecated.h>

int gsm_data_count=0,i;
char gsm_data[100];
int main(void)
  ec:	c6 ec       	ldi	r28, 0xC6	; 198
  ee:	d0 e0       	ldi	r29, 0x00	; 0
	USART_Init();
	sei();                //it calls interrupts
    while(1)
    {
        //TODO:: Please write your application code 
		for(i=0;i<100;i++)
  f0:	10 92 c7 00 	sts	0x00C7, r1
  f4:	10 92 c6 00 	sts	0x00C6, r1
		{
			if(gsm_data[i]=='C'&& gsm_data[i+1]=='M'&& gsm_data[i+2]=='T'&& gsm_data[i+3]=='I')
  f8:	f8 01       	movw	r30, r16
  fa:	80 81       	ld	r24, Z
  fc:	83 34       	cpi	r24, 0x43	; 67
  fe:	99 f4       	brne	.+38     	; 0x126 <main+0x68>
 100:	f7 01       	movw	r30, r14
 102:	80 81       	ld	r24, Z
 104:	8d 34       	cpi	r24, 0x4D	; 77
 106:	79 f4       	brne	.+30     	; 0x126 <main+0x68>
 108:	f6 01       	movw	r30, r12
 10a:	80 81       	ld	r24, Z
 10c:	84 35       	cpi	r24, 0x54	; 84
 10e:	59 f4       	brne	.+22     	; 0x126 <main+0x68>
 110:	e5 e6       	ldi	r30, 0x65	; 101
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	89 34       	cpi	r24, 0x49	; 73
 118:	31 f4       	brne	.+12     	; 0x126 <main+0x68>
 11a:	87 ea       	ldi	r24, 0xA7	; 167
 11c:	91 e6       	ldi	r25, 0x61	; 97
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x60>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x66>
 124:	00 00       	nop
			{
				_delay_ms(100);
			}
			while(gsm_data[i]!=',')
 126:	80 91 c6 00 	lds	r24, 0x00C6
 12a:	90 91 c7 00 	lds	r25, 0x00C7
 12e:	f8 01       	movw	r30, r16
 130:	e8 0f       	add	r30, r24
 132:	f9 1f       	adc	r31, r25
 134:	20 81       	ld	r18, Z
 136:	2c 32       	cpi	r18, 0x2C	; 44
 138:	c1 f0       	breq	.+48     	; 0x16a <main+0xac>
#include <avr/delay.h>
#include <compat/deprecated.h>

int gsm_data_count=0,i;
char gsm_data[100];
int main(void)
 13a:	fc 01       	movw	r30, r24
 13c:	ed 59       	subi	r30, 0x9D	; 157
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				_delay_ms(100);
			}
			while(gsm_data[i]!=',')
			{
				i++;
 140:	01 96       	adiw	r24, 0x01	; 1
		{
			if(gsm_data[i]=='C'&& gsm_data[i+1]=='M'&& gsm_data[i+2]=='T'&& gsm_data[i+3]=='I')
			{
				_delay_ms(100);
			}
			while(gsm_data[i]!=',')
 142:	21 91       	ld	r18, Z+
 144:	2c 32       	cpi	r18, 0x2C	; 44
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x82>
 148:	80 93 c6 00 	sts	0x00C6, r24
 14c:	90 93 c7 00 	sts	0x00C7, r25
			{
				i++;
            }
			int j=i;
			wrdata(gsm_data[j+1]);        //j ki value pe "," hai..j+1 karne par value milengi address of our msgs
 150:	f8 01       	movw	r30, r16
 152:	e8 0f       	add	r30, r24
 154:	f9 1f       	adc	r31, r25
 156:	81 81       	ldd	r24, Z+1	; 0x01
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 54 00 	call	0xa8	; 0xa8 <wrdata>
 15e:	0c c0       	rjmp	.+24     	; 0x178 <main+0xba>
			for(i=0;i<100;i++)
			{
			    gsm_data[i]=0;	
 160:	11 92       	st	Z+, r1
			{
				i++;
            }
			int j=i;
			wrdata(gsm_data[j+1]);        //j ki value pe "," hai..j+1 karne par value milengi address of our msgs
			for(i=0;i<100;i++)
 162:	ec 17       	cp	r30, r28
 164:	fd 07       	cpc	r31, r29
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0xa2>
 168:	c3 cf       	rjmp	.-122    	; 0xf0 <main+0x32>
			while(gsm_data[i]!=',')
			{
				i++;
            }
			int j=i;
			wrdata(gsm_data[j+1]);        //j ki value pe "," hai..j+1 karne par value milengi address of our msgs
 16a:	f8 01       	movw	r30, r16
 16c:	e8 0f       	add	r30, r24
 16e:	f9 1f       	adc	r31, r25
 170:	81 81       	ldd	r24, Z+1	; 0x01
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 54 00 	call	0xa8	; 0xa8 <wrdata>
			for(i=0;i<100;i++)
 178:	f8 01       	movw	r30, r16
 17a:	f2 cf       	rjmp	.-28     	; 0x160 <main+0xa2>

0000017c <__vector_11>:
            }
		}
	}
}			
ISR (USART_RXC_vect)
{
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	2f 93       	push	r18
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
	
	gsm_data[gsm_data_count]=UDR;
 190:	80 91 60 00 	lds	r24, 0x0060
 194:	90 91 61 00 	lds	r25, 0x0061
 198:	2c b1       	in	r18, 0x0c	; 12
 19a:	fc 01       	movw	r30, r24
 19c:	ee 59       	subi	r30, 0x9E	; 158
 19e:	ff 4f       	sbci	r31, 0xFF	; 255
 1a0:	20 83       	st	Z, r18
	gsm_data_count++;
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	90 93 61 00 	sts	0x0061, r25
 1a8:	80 93 60 00 	sts	0x0060, r24
}
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	2f 91       	pop	r18
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <USART_Transmit>:

//Transmission
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
 1c0:	5d 9b       	sbis	0x0b, 5	; 11
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
 1c4:	8c b9       	out	0x0c, r24	; 12
}
 1c6:	08 95       	ret

000001c8 <wrcommand>:
void wrcommand(unsigned char command)
{
	cbi(PORTB,PB0);
 1c8:	c0 98       	cbi	0x18, 0	; 24
	PORTD=command;
 1ca:	82 bb       	out	0x12, r24	; 18
	sbi(PORTB,PB1);
 1cc:	c1 9a       	sbi	0x18, 1	; 24
 1ce:	87 ea       	ldi	r24, 0xA7	; 167
 1d0:	91 e6       	ldi	r25, 0x61	; 97
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <wrcommand+0xa>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <wrcommand+0x10>
 1d8:	00 00       	nop
	_delay_ms(100);
	cbi(PORTB,PB1);
 1da:	c1 98       	cbi	0x18, 1	; 24
}
 1dc:	08 95       	ret

000001de <lcd_initialisation>:
	_delay_ms(100);
	cbi(PORTB,PB1);
}
void lcd_initialisation()
{
	wrcommand(0X38);
 1de:	88 e3       	ldi	r24, 0x38	; 56
 1e0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <wrcommand>
	wrcommand(0X80);
 1e4:	80 e8       	ldi	r24, 0x80	; 128
 1e6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <wrcommand>
	wrcommand(0X06);
 1ea:	86 e0       	ldi	r24, 0x06	; 6
 1ec:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <wrcommand>
	wrcommand(0X01);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <wrcommand>
	wrcommand(0X0C);  }  //curser off
 1f6:	8c e0       	ldi	r24, 0x0C	; 12
 1f8:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <wrcommand>
 1fc:	08 95       	ret

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
