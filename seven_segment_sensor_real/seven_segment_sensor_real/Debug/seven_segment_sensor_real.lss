
seven_segment_sensor_real.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000017c  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000970  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000682  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ce  00000000  00000000  000010b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000493  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001714  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000139  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ab  00000000  00000000  00001891  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 38       	cpi	r26, 0x88	; 136
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  8a:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <unit>:
		}
    }
}
void unit(int k)
{
	PORTA=a[k];
  92:	fc 01       	movw	r30, r24
  94:	ee 0f       	add	r30, r30
  96:	ff 1f       	adc	r31, r31
  98:	ec 58       	subi	r30, 0x8C	; 140
  9a:	ff 4f       	sbci	r31, 0xFF	; 255
  9c:	80 81       	ld	r24, Z
  9e:	8b bb       	out	0x1b, r24	; 27
}
  a0:	08 95       	ret

000000a2 <tens>:
void tens(int l)
{
	PORTD=b[l];
  a2:	fc 01       	movw	r30, r24
  a4:	ee 0f       	add	r30, r30
  a6:	ff 1f       	adc	r31, r31
  a8:	e0 5a       	subi	r30, 0xA0	; 160
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	80 81       	ld	r24, Z
  ae:	82 bb       	out	0x12, r24	; 18
  b0:	08 95       	ret

000000b2 <main>:
	
int main(void)
{
	int x,i=0;
	int temp=0;
	DDRD= 0b11111111;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	81 bb       	out	0x11, r24	; 17
	DDRA=0b11111111;
  b6:	8a bb       	out	0x1a, r24	; 26
	DDRC=0b00000000;
  b8:	14 ba       	out	0x14, r1	; 20
int b[10]={0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b1101101,0b1111101,0b0000111,0b1111111,0b1101111};
	
int main(void)
{
	int x,i=0;
	int temp=0;
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
int a[10]={0b1000000,0b1111001,0b0100100,0b0110000,0b0011001,0b0010010,0b0000010,0b1111000,0b0000000,0b0010000};
int b[10]={0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b1101101,0b1111101,0b0000111,0b1111111,0b1101111};
	
int main(void)
{
	int x,i=0;
  be:	00 e0       	ldi	r16, 0x00	; 0
  c0:	10 e0       	ldi	r17, 0x00	; 0
        //TODO:: Please write your application code 
		x=PINC;
		x=x&0b00000001;
		if(x==0&& temp==0)
		{
			temp=1;
  c2:	c1 e0       	ldi	r28, 0x01	; 1
  c4:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else if(x==1&& temp==1)
		{
			i++;
			//PORTB=i;
			t=i/10;
  c6:	0f 2e       	mov	r0, r31
  c8:	fa e0       	ldi	r31, 0x0A	; 10
  ca:	cf 2e       	mov	r12, r31
  cc:	dd 24       	eor	r13, r13
  ce:	f0 2d       	mov	r31, r0
			tens(t);
			u=i%10;
			unit(u);
			temp=0;
  d0:	aa 24       	eor	r10, r10
  d2:	bb 24       	eor	r11, r11
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <main+0x26>
        //TODO:: Please write your application code 
		x=PINC;
		x=x&0b00000001;
		if(x==0&& temp==0)
		{
			temp=1;
  d6:	ae 01       	movw	r20, r28
	DDRC=0b00000000;
	int u,t;
	while(1)
    {
        //TODO:: Please write your application code 
		x=PINC;
  d8:	23 b3       	in	r18, 0x13	; 19
  da:	30 e0       	ldi	r19, 0x00	; 0
		x=x&0b00000001;
		if(x==0&& temp==0)
  dc:	c9 01       	movw	r24, r18
  de:	81 70       	andi	r24, 0x01	; 1
  e0:	90 70       	andi	r25, 0x00	; 0
  e2:	20 fd       	sbrc	r18, 0
  e4:	04 c0       	rjmp	.+8      	; 0xee <main+0x3c>
  e6:	41 15       	cp	r20, r1
  e8:	51 05       	cpc	r21, r1
  ea:	a9 f3       	breq	.-22     	; 0xd6 <main+0x24>
  ec:	f5 cf       	rjmp	.-22     	; 0xd8 <main+0x26>
		{
			temp=1;
			
			//_delay_ms(1000);
		}
		else if(x==1&& temp==1)
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 05       	cpc	r25, r1
  f2:	91 f7       	brne	.-28     	; 0xd8 <main+0x26>
  f4:	41 30       	cpi	r20, 0x01	; 1
  f6:	51 05       	cpc	r21, r1
  f8:	79 f7       	brne	.-34     	; 0xd8 <main+0x26>
		{
			i++;
  fa:	0f 5f       	subi	r16, 0xFF	; 255
  fc:	1f 4f       	sbci	r17, 0xFF	; 255
			//PORTB=i;
			t=i/10;
  fe:	c8 01       	movw	r24, r16
 100:	b6 01       	movw	r22, r12
 102:	0e 94 95 00 	call	0x12a	; 0x12a <__divmodhi4>
 106:	7c 01       	movw	r14, r24
			tens(t);
 108:	cb 01       	movw	r24, r22
 10a:	0e 94 51 00 	call	0xa2	; 0xa2 <tens>
			u=i%10;
			unit(u);
 10e:	c7 01       	movw	r24, r14
 110:	0e 94 49 00 	call	0x92	; 0x92 <unit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	8f e9       	ldi	r24, 0x9F	; 159
 116:	96 e8       	ldi	r25, 0x86	; 134
 118:	a1 e0       	ldi	r26, 0x01	; 1
 11a:	81 50       	subi	r24, 0x01	; 1
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	a0 40       	sbci	r26, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x68>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x72>
 124:	00 00       	nop
			temp=0;
 126:	a5 01       	movw	r20, r10
 128:	d7 cf       	rjmp	.-82     	; 0xd8 <main+0x26>

0000012a <__divmodhi4>:
 12a:	97 fb       	bst	r25, 7
 12c:	09 2e       	mov	r0, r25
 12e:	07 26       	eor	r0, r23
 130:	0a d0       	rcall	.+20     	; 0x146 <__divmodhi4_neg1>
 132:	77 fd       	sbrc	r23, 7
 134:	04 d0       	rcall	.+8      	; 0x13e <__divmodhi4_neg2>
 136:	0c d0       	rcall	.+24     	; 0x150 <__udivmodhi4>
 138:	06 d0       	rcall	.+12     	; 0x146 <__divmodhi4_neg1>
 13a:	00 20       	and	r0, r0
 13c:	1a f4       	brpl	.+6      	; 0x144 <__divmodhi4_exit>

0000013e <__divmodhi4_neg2>:
 13e:	70 95       	com	r23
 140:	61 95       	neg	r22
 142:	7f 4f       	sbci	r23, 0xFF	; 255

00000144 <__divmodhi4_exit>:
 144:	08 95       	ret

00000146 <__divmodhi4_neg1>:
 146:	f6 f7       	brtc	.-4      	; 0x144 <__divmodhi4_exit>
 148:	90 95       	com	r25
 14a:	81 95       	neg	r24
 14c:	9f 4f       	sbci	r25, 0xFF	; 255
 14e:	08 95       	ret

00000150 <__udivmodhi4>:
 150:	aa 1b       	sub	r26, r26
 152:	bb 1b       	sub	r27, r27
 154:	51 e1       	ldi	r21, 0x11	; 17
 156:	07 c0       	rjmp	.+14     	; 0x166 <__udivmodhi4_ep>

00000158 <__udivmodhi4_loop>:
 158:	aa 1f       	adc	r26, r26
 15a:	bb 1f       	adc	r27, r27
 15c:	a6 17       	cp	r26, r22
 15e:	b7 07       	cpc	r27, r23
 160:	10 f0       	brcs	.+4      	; 0x166 <__udivmodhi4_ep>
 162:	a6 1b       	sub	r26, r22
 164:	b7 0b       	sbc	r27, r23

00000166 <__udivmodhi4_ep>:
 166:	88 1f       	adc	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	5a 95       	dec	r21
 16c:	a9 f7       	brne	.-22     	; 0x158 <__udivmodhi4_loop>
 16e:	80 95       	com	r24
 170:	90 95       	com	r25
 172:	bc 01       	movw	r22, r24
 174:	cd 01       	movw	r24, r26
 176:	08 95       	ret

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
