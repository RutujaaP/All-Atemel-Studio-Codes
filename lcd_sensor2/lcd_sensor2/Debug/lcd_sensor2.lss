
lcd_sensor2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000014c  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000940  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000392  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d9  00000000  00000000  00000d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a9  00000000  00000000  00000e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000af  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c3  00000000  00000000  000011b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000127a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 38       	cpi	r26, 0x88	; 136
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include <avr/io.h>
#include <avr/delay.h>

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	a8 97       	sbiw	r28, 0x28	; 40
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	DDRC=0b00000000;  //to detect input from pin
  a6:	14 ba       	out	0x14, r1	; 20
	DDRA=0b11111111;  // lcd 1 common anode
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a bb       	out	0x1a, r24	; 26
	DDRD=0b11111111;  // lcd 2 common cathode
  ac:	81 bb       	out	0x11, r24	; 17
	int temp = 0;
    int a[10]={0b1000000, 0b1111001, 0b0100100, 0b0110000, 0b0011001, 0b0010010, 0b0000010, 0b1111000, 0b0000000, 0b0010000};    //common anode connected to porta
  ae:	de 01       	movw	r26, r28
  b0:	11 96       	adiw	r26, 0x01	; 1
  b2:	e0 e6       	ldi	r30, 0x60	; 96
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	84 e1       	ldi	r24, 0x14	; 20
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	81 50       	subi	r24, 0x01	; 1
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x26>
	int b[10]={0b0111111, 0b0000110, 0b1011011, 0b1001111, 0b1100110, 0b1101101, 0b1111101, 0b0000111, 0b1111111, 0b1101111};    //common cathod connected to portd
  c0:	de 01       	movw	r26, r28
  c2:	55 96       	adiw	r26, 0x15	; 21
  c4:	e4 e7       	ldi	r30, 0x74	; 116
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	84 e1       	ldi	r24, 0x14	; 20
  ca:	01 90       	ld	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	81 50       	subi	r24, 0x01	; 1
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x38>
int main(void)
{
	DDRC=0b00000000;  //to detect input from pin
	DDRA=0b11111111;  // lcd 1 common anode
	DDRD=0b11111111;  // lcd 2 common cathode
	int temp = 0;
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	50 e0       	ldi	r21, 0x00	; 0
    int a[10]={0b1000000, 0b1111001, 0b0100100, 0b0110000, 0b0011001, 0b0010010, 0b0000010, 0b1111000, 0b0000000, 0b0010000};    //common anode connected to porta
	int b[10]={0b0111111, 0b0000110, 0b1011011, 0b1001111, 0b1100110, 0b1101101, 0b1111101, 0b0000111, 0b1111111, 0b1101111};    //common cathod connected to portd
    while(1)
    {
        //TODO:: Please write your application code 
		for(int i=0;i<10;i++)
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b0 e0       	ldi	r27, 0x00	; 0


#include <avr/io.h>
#include <avr/delay.h>

int main(void)
  da:	be 01       	movw	r22, r28
  dc:	6b 5e       	subi	r22, 0xEB	; 235
  de:	7f 4f       	sbci	r23, 0xFF	; 255
					temp=1;
				}
				else if(x==1 && temp==1)
				{
					PORTA=a[count];
					temp=0;
  e0:	ee 24       	eor	r14, r14
  e2:	ff 24       	eor	r15, r15
  e4:	de 2c       	mov	r13, r14
  e6:	cf 2c       	mov	r12, r15
			for(int count=1;count<10;count++)
			{
				int x = PINC & 0b00000001;
				if(x==0 && temp==0)
				{
					temp=1;
  e8:	01 e0       	ldi	r16, 0x01	; 1
  ea:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        //TODO:: Please write your application code 
		for(int i=0;i<10;i++)
		{
			PORTD=b[i];
  ec:	cd 01       	movw	r24, r26
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	2c 0f       	add	r18, r28
  f8:	3d 1f       	adc	r19, r29
  fa:	82 0f       	add	r24, r18
  fc:	93 1f       	adc	r25, r19
  fe:	fc 01       	movw	r30, r24
 100:	84 89       	ldd	r24, Z+20	; 0x14
 102:	82 bb       	out	0x12, r24	; 18
 104:	fe 01       	movw	r30, r28
 106:	33 96       	adiw	r30, 0x03	; 3
			for(int count=1;count<10;count++)
			{
				int x = PINC & 0b00000001;
 108:	23 b3       	in	r18, 0x13	; 19
 10a:	30 e0       	ldi	r19, 0x00	; 0
				if(x==0 && temp==0)
 10c:	c9 01       	movw	r24, r18
 10e:	81 70       	andi	r24, 0x01	; 1
 110:	90 70       	andi	r25, 0x00	; 0
 112:	20 fd       	sbrc	r18, 0
 114:	05 c0       	rjmp	.+10     	; 0x120 <main+0x8e>
 116:	41 15       	cp	r20, r1
 118:	51 05       	cpc	r21, r1
 11a:	61 f4       	brne	.+24     	; 0x134 <main+0xa2>
				{
					temp=1;
 11c:	a8 01       	movw	r20, r16
 11e:	0a c0       	rjmp	.+20     	; 0x134 <main+0xa2>
				}
				else if(x==1 && temp==1)
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	91 05       	cpc	r25, r1
 124:	39 f4       	brne	.+14     	; 0x134 <main+0xa2>
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	51 05       	cpc	r21, r1
 12a:	21 f4       	brne	.+8      	; 0x134 <main+0xa2>
				{
					PORTA=a[count];
 12c:	80 81       	ld	r24, Z
 12e:	8b bb       	out	0x1b, r24	; 27
					temp=0;
 130:	4d 2d       	mov	r20, r13
 132:	5c 2d       	mov	r21, r12
				{
					temp=1;
				}
				else if(x==1 && temp==1)
				{
					PORTA=a[count];
 134:	32 96       	adiw	r30, 0x02	; 2
    {
        //TODO:: Please write your application code 
		for(int i=0;i<10;i++)
		{
			PORTD=b[i];
			for(int count=1;count<10;count++)
 136:	e6 17       	cp	r30, r22
 138:	f7 07       	cpc	r31, r23
 13a:	31 f7       	brne	.-52     	; 0x108 <main+0x76>
    int a[10]={0b1000000, 0b1111001, 0b0100100, 0b0110000, 0b0011001, 0b0010010, 0b0000010, 0b1111000, 0b0000000, 0b0010000};    //common anode connected to porta
	int b[10]={0b0111111, 0b0000110, 0b1011011, 0b1001111, 0b1100110, 0b1101101, 0b1111101, 0b0000111, 0b1111111, 0b1101111};    //common cathod connected to portd
    while(1)
    {
        //TODO:: Please write your application code 
		for(int i=0;i<10;i++)
 13c:	11 96       	adiw	r26, 0x01	; 1
 13e:	aa 30       	cpi	r26, 0x0A	; 10
 140:	b1 05       	cpc	r27, r1
 142:	a4 f2       	brlt	.-88     	; 0xec <main+0x5a>
 144:	d7 01       	movw	r26, r14
 146:	d2 cf       	rjmp	.-92     	; 0xec <main+0x5a>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
