
main_lcd_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  0000016c  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000958  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000052e  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001b9  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037e  00000000  00000000  000010bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001440  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000146  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012b  00000000  00000000  000015f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001721  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  8a:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <wrcommand>:
        }
     }
}
void wrcommand(unsigned char command)
{
	cbi(PORTB,PB0);
  92:	c0 98       	cbi	0x18, 0	; 24
	PORTD=command;
  94:	82 bb       	out	0x12, r24	; 18
	sbi(PORTB,PB1);
  96:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	87 ea       	ldi	r24, 0xA7	; 167
  9a:	91 e6       	ldi	r25, 0x61	; 97
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <wrcommand+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <wrcommand+0x10>
  a2:	00 00       	nop
	_delay_ms(100);
	cbi(PORTB,PB1);
  a4:	c1 98       	cbi	0x18, 1	; 24
}
  a6:	08 95       	ret

000000a8 <lcd_initialisation>:
	_delay_ms(100);
	cbi(PORTB,PB1);
}
void lcd_initialisation()
{
	wrcommand(0X38);
  a8:	88 e3       	ldi	r24, 0x38	; 56
  aa:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
	wrcommand(0X80);
  ae:	80 e8       	ldi	r24, 0x80	; 128
  b0:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
	wrcommand(0X06);
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
	wrcommand(0X01);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
	wrcommand(0X0C);
  c0:	8c e0       	ldi	r24, 0x0C	; 12
  c2:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
}
  c6:	08 95       	ret

000000c8 <main>:
#include <avr/delay.h>
#include <compat/deprecated.h>

int main(void)
{
	DDRD=255;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	81 bb       	out	0x11, r24	; 17
	DDRB=255;
  cc:	87 bb       	out	0x17, r24	; 23
	DDRA=0;
  ce:	1a ba       	out	0x1a, r1	; 26
	int count = 0, temp = 0;
	lcd_initialisation();
  d0:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_initialisation>
int main(void)
{
	DDRD=255;
	DDRB=255;
	DDRA=0;
	int count = 0, temp = 0;
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0
		int x = PINA & 0b00000001;
		if(x==0 && temp==0)
		{
			temp=1;
			wrcommand(0X80);
			lcd_string("OBJECT DETECTED");
  d8:	c0 e6       	ldi	r28, 0x60	; 96
  da:	d0 e0       	ldi	r29, 0x00	; 0
    {
        //TODO:: Please write your application code 
		int x = PINA & 0b00000001;
		if(x==0 && temp==0)
		{
			temp=1;
  dc:	01 e0       	ldi	r16, 0x01	; 1
  de:	10 e0       	ldi	r17, 0x00	; 0
		{
			count++;
			//PORTD=count;
			//wrdata(count);
			wrcommand(0X80);
			lcd_string("OBJECT NOT FOUND");
  e0:	0f 2e       	mov	r0, r31
  e2:	f0 e7       	ldi	r31, 0x70	; 112
  e4:	ef 2e       	mov	r14, r31
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	ff 2e       	mov	r15, r31
  ea:	f0 2d       	mov	r31, r0
			temp=0;
  ec:	cc 24       	eor	r12, r12
  ee:	dd 24       	eor	r13, r13
	lcd_initialisation();
	
    while(1)
    {
        //TODO:: Please write your application code 
		int x = PINA & 0b00000001;
  f0:	29 b3       	in	r18, 0x19	; 25
  f2:	30 e0       	ldi	r19, 0x00	; 0
		if(x==0 && temp==0)
  f4:	c9 01       	movw	r24, r18
  f6:	81 70       	andi	r24, 0x01	; 1
  f8:	90 70       	andi	r25, 0x00	; 0
  fa:	20 fd       	sbrc	r18, 0
  fc:	0c c0       	rjmp	.+24     	; 0x116 <main+0x4e>
  fe:	41 15       	cp	r20, r1
 100:	51 05       	cpc	r21, r1
 102:	b1 f7       	brne	.-20     	; 0xf0 <main+0x28>
		{
			temp=1;
			wrcommand(0X80);
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
			lcd_string("OBJECT DETECTED");
 10c:	ce 01       	movw	r24, r28
 10e:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_string>
    {
        //TODO:: Please write your application code 
		int x = PINA & 0b00000001;
		if(x==0 && temp==0)
		{
			temp=1;
 112:	a8 01       	movw	r20, r16
    while(1)
    {
        //TODO:: Please write your application code 
		int x = PINA & 0b00000001;
		if(x==0 && temp==0)
		{
 114:	ed cf       	rjmp	.-38     	; 0xf0 <main+0x28>
			temp=1;
			wrcommand(0X80);
			lcd_string("OBJECT DETECTED");
		}
		else if(x==1 && temp==1)
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	91 05       	cpc	r25, r1
 11a:	51 f7       	brne	.-44     	; 0xf0 <main+0x28>
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	51 05       	cpc	r21, r1
 120:	39 f7       	brne	.-50     	; 0xf0 <main+0x28>
		{
			count++;
			//PORTD=count;
			//wrdata(count);
			wrcommand(0X80);
 122:	80 e8       	ldi	r24, 0x80	; 128
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
			lcd_string("OBJECT NOT FOUND");
 12a:	c7 01       	movw	r24, r14
 12c:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_string>
			temp=0;
 130:	a6 01       	movw	r20, r12
 132:	de cf       	rjmp	.-68     	; 0xf0 <main+0x28>

00000134 <wrdata>:
	_delay_ms(100);
	cbi(PORTB,PB1);
}
void wrdata(unsigned char command)
{
	sbi(PORTB,PB0);
 134:	c0 9a       	sbi	0x18, 0	; 24
	PORTD=command;
 136:	82 bb       	out	0x12, r24	; 18
	sbi(PORTB,PB1);
 138:	c1 9a       	sbi	0x18, 1	; 24
 13a:	87 ea       	ldi	r24, 0xA7	; 167
 13c:	91 e6       	ldi	r25, 0x61	; 97
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <wrdata+0xa>
 142:	00 c0       	rjmp	.+0      	; 0x144 <wrdata+0x10>
 144:	00 00       	nop
	_delay_ms(100);
	cbi(PORTB,PB1);
 146:	c1 98       	cbi	0x18, 1	; 24
}
 148:	08 95       	ret

0000014a <lcd_string>:
	wrcommand(0X06);
	wrcommand(0X01);
	wrcommand(0X0C);
}
void lcd_string(unsigned char *string)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	ec 01       	movw	r28, r24
	while(*string)   //while is 1 till last alphabet.. after that due to '\0' it will end
 150:	88 81       	ld	r24, Y
 152:	88 23       	and	r24, r24
 154:	31 f0       	breq	.+12     	; 0x162 <lcd_string+0x18>
	wrcommand(0X80);
	wrcommand(0X06);
	wrcommand(0X01);
	wrcommand(0X0C);
}
void lcd_string(unsigned char *string)
 156:	21 96       	adiw	r28, 0x01	; 1
{
	while(*string)   //while is 1 till last alphabet.. after that due to '\0' it will end
	wrdata(*string++);   // it is taking a single letter at a time
 158:	0e 94 9a 00 	call	0x134	; 0x134 <wrdata>
	wrcommand(0X01);
	wrcommand(0X0C);
}
void lcd_string(unsigned char *string)
{
	while(*string)   //while is 1 till last alphabet.. after that due to '\0' it will end
 15c:	89 91       	ld	r24, Y+
 15e:	88 23       	and	r24, r24
 160:	d9 f7       	brne	.-10     	; 0x158 <lcd_string+0xe>
	wrdata(*string++);   // it is taking a single letter at a time
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
