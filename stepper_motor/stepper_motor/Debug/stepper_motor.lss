
stepper_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  000008d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000584  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000127  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003d4  00000000  00000000  00001003  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  000013d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000106  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000024  00000000  00000000  00001502  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/io.h>
#include <avr/delay.h>
#define delayv 10
int main(void)
{
	DDRA=0b11111111;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	PORTA=0b00001000;
	_delay_ms(500);*/
    while(1)
    {
        //TODO:: Please write your application code 
		for(int i=0;i<10;i++){
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
		PORTA=0b00000001;
  9a:	b1 e0       	ldi	r27, 0x01	; 1
		_delay_ms(delayv);
		PORTA=0b00000011;
  9c:	a3 e0       	ldi	r26, 0x03	; 3
		_delay_ms(delayv);
		PORTA=0b00000010;
  9e:	f2 e0       	ldi	r31, 0x02	; 2
		_delay_ms(delayv);
		PORTA=0b00000110;
  a0:	e6 e0       	ldi	r30, 0x06	; 6
		_delay_ms(delayv);
		PORTA=0b00000100;
  a2:	74 e0       	ldi	r23, 0x04	; 4
		_delay_ms(delayv);
		PORTA=0b00001100;
  a4:	6c e0       	ldi	r22, 0x0C	; 12
		_delay_ms(delayv);
		PORTA=0b00001000;
  a6:	58 e0       	ldi	r21, 0x08	; 8
		_delay_ms(delayv);
		PORTA=0b00001001;
  a8:	49 e0       	ldi	r20, 0x09	; 9
	PORTA=0b00001000;
	_delay_ms(500);*/
    while(1)
    {
        //TODO:: Please write your application code 
		for(int i=0;i<10;i++){
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
		PORTA=0b00000001;
  ae:	bb bb       	out	0x1b, r27	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	c3 ec       	ldi	r28, 0xC3	; 195
  b2:	d9 e0       	ldi	r29, 0x09	; 9
  b4:	21 97       	sbiw	r28, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x22>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x28>
  ba:	00 00       	nop
		_delay_ms(delayv);
		PORTA=0b00000011;
  bc:	ab bb       	out	0x1b, r26	; 27
  be:	c3 ec       	ldi	r28, 0xC3	; 195
  c0:	d9 e0       	ldi	r29, 0x09	; 9
  c2:	21 97       	sbiw	r28, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x30>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x36>
  c8:	00 00       	nop
		_delay_ms(delayv);
		PORTA=0b00000010;
  ca:	fb bb       	out	0x1b, r31	; 27
  cc:	c3 ec       	ldi	r28, 0xC3	; 195
  ce:	d9 e0       	ldi	r29, 0x09	; 9
  d0:	21 97       	sbiw	r28, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x3e>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x44>
  d6:	00 00       	nop
		_delay_ms(delayv);
		PORTA=0b00000110;
  d8:	eb bb       	out	0x1b, r30	; 27
  da:	c3 ec       	ldi	r28, 0xC3	; 195
  dc:	d9 e0       	ldi	r29, 0x09	; 9
  de:	21 97       	sbiw	r28, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x4c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x52>
  e4:	00 00       	nop
		_delay_ms(delayv);
		PORTA=0b00000100;
  e6:	7b bb       	out	0x1b, r23	; 27
  e8:	c3 ec       	ldi	r28, 0xC3	; 195
  ea:	d9 e0       	ldi	r29, 0x09	; 9
  ec:	21 97       	sbiw	r28, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x5a>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x60>
  f2:	00 00       	nop
		_delay_ms(delayv);
		PORTA=0b00001100;
  f4:	6b bb       	out	0x1b, r22	; 27
  f6:	c3 ec       	ldi	r28, 0xC3	; 195
  f8:	d9 e0       	ldi	r29, 0x09	; 9
  fa:	21 97       	sbiw	r28, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x68>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x6e>
 100:	00 00       	nop
		_delay_ms(delayv);
		PORTA=0b00001000;
 102:	5b bb       	out	0x1b, r21	; 27
 104:	c3 ec       	ldi	r28, 0xC3	; 195
 106:	d9 e0       	ldi	r29, 0x09	; 9
 108:	21 97       	sbiw	r28, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x76>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x7c>
 10e:	00 00       	nop
		_delay_ms(delayv);
		PORTA=0b00001001;
 110:	4b bb       	out	0x1b, r20	; 27
 112:	c3 ec       	ldi	r28, 0xC3	; 195
 114:	d9 e0       	ldi	r29, 0x09	; 9
 116:	21 97       	sbiw	r28, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x84>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x8a>
 11c:	00 00       	nop
	PORTA=0b00001000;
	_delay_ms(500);*/
    while(1)
    {
        //TODO:: Please write your application code 
		for(int i=0;i<10;i++){
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	8a 30       	cpi	r24, 0x0A	; 10
 122:	91 05       	cpc	r25, r1
 124:	24 f2       	brlt	.-120    	; 0xae <main+0x1c>
 126:	c9 01       	movw	r24, r18
 128:	c2 cf       	rjmp	.-124    	; 0xae <main+0x1c>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
