
sensornew1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000888  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000034f  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000b1  00000000  00000000  00000c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000029a  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ac  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000007b  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include <avr/io.h>

int main(void)
{
	DDRA=0b00000000;   // to detect the input
  92:	1a ba       	out	0x1a, r1	; 26
	DDRB=0b11111111;   //to detect the output (glowing of led)
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	87 bb       	out	0x17, r24	; 23
	int count = 0, temp = 0;
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	e0 e0       	ldi	r30, 0x00	; 0
  9e:	f0 e0       	ldi	r31, 0x00	; 0
    {
        //TODO:: Please write your application code 
		int x = PINA & 0b00000001;
		if(x==0 && temp==0)
		{
			temp=1;
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	70 e0       	ldi	r23, 0x00	; 0
		}
		else if(x==1 && temp==1)
		{
			count++;
			PORTB=count;
			temp=0;
  a4:	a0 e0       	ldi	r26, 0x00	; 0
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	01 c0       	rjmp	.+2      	; 0xac <main+0x1a>
    {
        //TODO:: Please write your application code 
		int x = PINA & 0b00000001;
		if(x==0 && temp==0)
		{
			temp=1;
  aa:	ab 01       	movw	r20, r22
	DDRB=0b11111111;   //to detect the output (glowing of led)
	int count = 0, temp = 0;
    while(1)
    {
        //TODO:: Please write your application code 
		int x = PINA & 0b00000001;
  ac:	29 b3       	in	r18, 0x19	; 25
  ae:	30 e0       	ldi	r19, 0x00	; 0
		if(x==0 && temp==0)
  b0:	c9 01       	movw	r24, r18
  b2:	81 70       	andi	r24, 0x01	; 1
  b4:	90 70       	andi	r25, 0x00	; 0
  b6:	20 fd       	sbrc	r18, 0
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <main+0x30>
  ba:	41 15       	cp	r20, r1
  bc:	51 05       	cpc	r21, r1
  be:	a9 f3       	breq	.-22     	; 0xaa <main+0x18>
  c0:	f5 cf       	rjmp	.-22     	; 0xac <main+0x1a>
		{
			temp=1;
		}
		else if(x==1 && temp==1)
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	91 05       	cpc	r25, r1
  c6:	91 f7       	brne	.-28     	; 0xac <main+0x1a>
  c8:	41 30       	cpi	r20, 0x01	; 1
  ca:	51 05       	cpc	r21, r1
  cc:	79 f7       	brne	.-34     	; 0xac <main+0x1a>
		{
			count++;
  ce:	31 96       	adiw	r30, 0x01	; 1
			PORTB=count;
  d0:	e8 bb       	out	0x18, r30	; 24
			temp=0;
  d2:	ad 01       	movw	r20, r26
  d4:	eb cf       	rjmp	.-42     	; 0xac <main+0x1a>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
