
adr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 000000a0  00000000  00000000  00000908  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000584  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000193  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003e3  00000000  00000000  000010bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  000014a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000010c  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000005c  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6f 00 	call	0xde	; 0xde <main>
  8a:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <wrcommand>:
		
    }
}
void wrcommand(unsigned char command)
{
	cbi(PORTB,PB0);
  92:	c0 98       	cbi	0x18, 0	; 24
	PORTD=command;
  94:	82 bb       	out	0x12, r24	; 18
	sbi(PORTB,PB1);
  96:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	87 ea       	ldi	r24, 0xA7	; 167
  9a:	91 e6       	ldi	r25, 0x61	; 97
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <wrcommand+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <wrcommand+0x10>
  a2:	00 00       	nop
	_delay_ms(100);
	cbi(PORTB,PB1);
  a4:	c1 98       	cbi	0x18, 1	; 24
}
  a6:	08 95       	ret

000000a8 <lcd_initialisation>:
	_delay_ms(100);
	cbi(PORTB,PB1);
}
void lcd_initialisation()
{
	wrcommand(0X38);
  a8:	88 e3       	ldi	r24, 0x38	; 56
  aa:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
	wrcommand(0X80);
  ae:	80 e8       	ldi	r24, 0x80	; 128
  b0:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
	wrcommand(0X06);
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
	wrcommand(0X01);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
	wrcommand(0X0C);    //curser off
  c0:	8c e0       	ldi	r24, 0x0C	; 12
  c2:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
	/*wrcommand(0X0E);    //curser is on
	wrcommand(0X0F);    //curser blink  */
  c6:	08 95       	ret

000000c8 <wrdata>:
	_delay_ms(100);
	cbi(PORTB,PB1);
}
void wrdata(unsigned char command)
{
	sbi(PORTB,PB0);
  c8:	c0 9a       	sbi	0x18, 0	; 24
	PORTD=command;
  ca:	82 bb       	out	0x12, r24	; 18
	sbi(PORTB,PB1);
  cc:	c1 9a       	sbi	0x18, 1	; 24
  ce:	87 ea       	ldi	r24, 0xA7	; 167
  d0:	91 e6       	ldi	r25, 0x61	; 97
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <wrdata+0xa>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <wrdata+0x10>
  d8:	00 00       	nop
	_delay_ms(100);
	cbi(PORTB,PB1);
  da:	c1 98       	cbi	0x18, 1	; 24
}
  dc:	08 95       	ret

000000de <main>:
#include <avr/io.h>
#include <avr/delay.h>
#include <compat/deprecated.h>
int main(void)
{
	ADCSRA=0XE3;     //PORTA is input  ADCSR(A)
  de:	83 ee       	ldi	r24, 0xE3	; 227
  e0:	86 b9       	out	0x06, r24	; 6
	ADMUX=0X61;
  e2:	81 e6       	ldi	r24, 0x61	; 97
  e4:	87 b9       	out	0x07, r24	; 7
	unsigned char x;
	
	DDRD=0b11111111;    //led or lcd
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	81 bb       	out	0x11, r24	; 17
	DDRB=0b11111111;   //rs,rw,en
  ea:	87 bb       	out	0x17, r24	; 23
	lcd_initialisation();
  ec:	0e 94 54 00 	call	0xa8	; 0xa8 <lcd_initialisation>
	wrcommand(0X80+4);
  f0:	84 e8       	ldi	r24, 0x84	; 132
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 49 00 	call	0x92	; 0x92 <wrcommand>
        //TODO:: Please write your application code 
		x=ADCH;
		if(x>151)
		{
			//PORTD=0XFF;
			wrdata(x/100 + 48);
  f8:	04 e6       	ldi	r16, 0x64	; 100
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	0f 2e       	mov	r0, r31
  fe:	f4 e6       	ldi	r31, 0x64	; 100
 100:	ff 2e       	mov	r15, r31
 102:	f0 2d       	mov	r31, r0
			wrdata((x/10)%10+48);
 104:	ca e0       	ldi	r28, 0x0A	; 10
	lcd_initialisation();
	wrcommand(0X80+4);
    while(1)
    {
        //TODO:: Please write your application code 
		x=ADCH;
 106:	d5 b1       	in	r29, 0x05	; 5
		if(x>151)
 108:	d8 39       	cpi	r29, 0x98	; 152
 10a:	d0 f0       	brcs	.+52     	; 0x140 <main+0x62>
		{
			//PORTD=0XFF;
			wrdata(x/100 + 48);
 10c:	8d 2f       	mov	r24, r29
 10e:	6f 2d       	mov	r22, r15
 110:	0e 94 a2 00 	call	0x144	; 0x144 <__udivmodqi4>
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	c0 96       	adiw	r24, 0x30	; 48
 118:	f8 01       	movw	r30, r16
 11a:	09 95       	icall
			wrdata((x/10)%10+48);
 11c:	8d 2f       	mov	r24, r29
 11e:	6c 2f       	mov	r22, r28
 120:	0e 94 a2 00 	call	0x144	; 0x144 <__udivmodqi4>
 124:	d9 2f       	mov	r29, r25
 126:	0e 94 a2 00 	call	0x144	; 0x144 <__udivmodqi4>
 12a:	89 2f       	mov	r24, r25
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	c0 96       	adiw	r24, 0x30	; 48
 130:	f8 01       	movw	r30, r16
 132:	09 95       	icall
			wrdata(x%10+48);
 134:	8d 2f       	mov	r24, r29
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	c0 96       	adiw	r24, 0x30	; 48
 13a:	f8 01       	movw	r30, r16
 13c:	09 95       	icall
 13e:	e3 cf       	rjmp	.-58     	; 0x106 <main+0x28>
			
		}
		else
		PORTD=0X00;
 140:	12 ba       	out	0x12, r1	; 18
 142:	e1 cf       	rjmp	.-62     	; 0x106 <main+0x28>

00000144 <__udivmodqi4>:
 144:	99 1b       	sub	r25, r25
 146:	79 e0       	ldi	r23, 0x09	; 9
 148:	04 c0       	rjmp	.+8      	; 0x152 <__udivmodqi4_ep>

0000014a <__udivmodqi4_loop>:
 14a:	99 1f       	adc	r25, r25
 14c:	96 17       	cp	r25, r22
 14e:	08 f0       	brcs	.+2      	; 0x152 <__udivmodqi4_ep>
 150:	96 1b       	sub	r25, r22

00000152 <__udivmodqi4_ep>:
 152:	88 1f       	adc	r24, r24
 154:	7a 95       	dec	r23
 156:	c9 f7       	brne	.-14     	; 0x14a <__udivmodqi4_loop>
 158:	80 95       	com	r24
 15a:	08 95       	ret

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
